sources:
    osm:
        type: TopoJSON
        url:  //vector.mapzen.com/osm/all/{z}/{x}/{y}.topojson?api_key=vector-tiles-JUsa0Gc
    astoria_data:
        type: GeoJSON
        url: https://raw.githubusercontent.com/reginaflores/florr422_ss2015/master/w12_Final/myTangram_Prototype_4/styles/geoJSON_data/meta_file_species_Point_Astoria.json
    crownHeights_L_data:
        type: GeoJSON
        url: https://raw.githubusercontent.com/reginaflores/florr422_ss2015/master/w12_Final/myTangram_Prototype_4/styles/geoJSON_data/meta_file_species_Point_CrownHeights_L.json
    crownHeights_TB_data:
        type: GeoJSON
        url: https://raw.githubusercontent.com/reginaflores/florr422_ss2015/master/w12_Final/myTangram_Prototype_4/styles/geoJSON_data/meta_file_species_Point_CrownHeights_TB.json
    fortgreen_data:
        type: GeoJSON
        url: https://raw.githubusercontent.com/reginaflores/florr422_ss2015/master/w12_Final/myTangram_Prototype_4/styles/geoJSON_data/meta_file_species_Point_FortGreen.json   
cameras:
    perspective:
        type: perspective
        focal_length: [[16, 2], [20, 6]] # pairs of [zoom, focal len]
        vanishing_point: [-250, -250] # relative to center of screen, in pixels
        active: true
scene:
    background:
        color: '#000000'
styles:
    tilt:
        animated: true
        base: polygons
        shaders:
            blocks:
                global: |
                    mat3 rotateX3D(float phi){
                        return mat3(
                            vec3(1.,0.,0.),
                            vec3(0.,cos(phi),-sin(phi)),
                            vec3(0.,sin(phi),cos(phi)));
                    }
                    mat3 rotateZ3D(float psi){
                        return mat3(
                            vec3(cos(psi),-sin(psi),0.),
                            vec3(sin(psi),cos(psi),0.),
                            vec3(0.,0.,1.));
                    }
                position: |
                    float t = 0.05; 
                    position.xyz = rotateX3D(abs(cos(t))) * rotateZ3D(abs(sin(t))*.5) * position.xyz;
    tilt_points:
        base: points
        mix: tilt
    New_tilt:
        base: points
        mix: tilt
    space-tile:
        shaders:
            blocks:
                global: |
                    // Variant to be add to both vertex and fragments shaders
                    varying vec3 v_pos;
                    //
                    // Get the coordinates in tile space
                    // ================================
                    vec2 getTileCoords() {
                        return fract(v_pos.xy);
                    }
                position: |
                    // Normalize the attribute position of a vertex
                    v_pos = modelPosition().xyz;
    lin:
        base: lines
        mix: tilt
    matrix:
        mix: [tilt,space-tile]
        texcoords: true
        shaders:
            blocks:
                global: |
                    // GridTile
                    //=============================
                    bool gridLine(vec2 st, float res, float press){
                        vec2 grid = fract(st*res);
                        return grid.x < res*press || grid.y < res*press;
                    }
                    float TileGrid(float res){
                        vec2 st = getTileCoords()*100.*res;
                        float pct = 0.0;
                        float press = 0.4+(1.0-fract(u_map_position.z))*0.1;
                        if (gridLine(st,0.01,press)) pct += 0.5;
                        if (gridLine(st,0.1,press)) pct += 0.1;
                        return pct;
                    }
                    float TileGrid(){ return mix(TileGrid(1.),TileGrid(2.),fract(u_map_position.z)); }
                    // Random
                    //=============================
                    float random (in vec2 _st) { 
                        return fract(sin(dot(_st.xy,
                        vec2(12.9898,78.233)))*43758.5453123);
                    }
                    //  Noise
                    //=============================
                    float noise (in vec2 _st) {
                        vec2 i = floor(_st);
                        vec2 f = fract(_st);
                        // Four corners in 2D of a tile
                        float a = random(i);
                        float b = random(i + vec2(1.0, 0.0));
                        float c = random(i + vec2(0.0, 1.0));
                        float d = random(i + vec2(1.0, 1.0));
                        vec2 u = f * f * (3.0 - 2.0 * f);
                        return mix(a, b, u.x) + 
                                (c - a)* u.y * (1.0 - u.x) + 
                                (d - b) * u.x * u.y;
                    }
                    float fbm ( in vec2 _st) {
                        float v = 0.0;
                        float a = 0.5;
                        vec2 shift = vec2(100.0);
                        // Rotate to reduce axial bias
                        mat2 rot = mat2(cos(0.5), sin(0.5), 
                                        -sin(0.5), cos(0.50));
                        for (int i = 0; i < 5; ++i) {
                            v += a * noise(_st);
                            _st = rot * _st * 2.0 + shift;
                            a *= 0.5;
                        }
                        return v;
                    }
                    //  Grid
                    //=============================
                    float grid (in vec2 _pos, in float _zoom, in float _lineWidth){
                        _pos = fract(_pos*_zoom);
                        vec2 g = smoothstep(vec2(0.5-_lineWidth),vec2(0.5),_pos) -
                                 smoothstep(vec2(0.5),vec2(0.5+_lineWidth),_pos);
                        return clamp(g.x+g.y,0.0,1.0);
                    }
                    //  Crosses
                    //=============================
                    float box(in vec2 _st, in vec2 _size){
                        _size = vec2(0.5) - _size*0.5;
                        vec2 uv = smoothstep(_size,
                                            _size+vec2(0.001),
                                            _st);
                        uv *= smoothstep(_size,
                                        _size+vec2(0.001),
                                        vec2(1.0)-_st);
                        return uv.x*uv.y;
                    }
                    float cross(in vec2 _st, float _size){
                        return  box(_st, vec2(_size*0.5,_size*0.125)) +
                                box(_st, vec2(_size*0.125,_size*0.5));
                    }
                    float cross(in vec2 _st, vec2 _size){
                        return  box(_st, vec2(_size.x*0.5,_size.y*0.125)) +
                                box(_st, vec2(_size.y*0.125,_size.x*0.5));
                    }
    roads:
        base: lines
        mix: matrix
        animated: true
        shaders:
            blocks:
                color: |
                    vec3 pos = worldPosition().xyz*0.01;
                    vec2 uv = v_texcoord.xy;
                    float pct = grid(v_texcoord,10.,0.1)*0.5;
                    uv *= 18.;
                    uv = fract(uv);
                    // uv += sin(u_time*0.2);
                    float smoothEdges = 0.01;
                    vec2 size = vec2(0.6);
                    size = vec2(0.5)-size*0.2;
                    vec2 aa = vec2(smoothEdges*0.5);
                    vec2 uv2 = smoothstep(size,size+aa,uv);
                    uv2 *= smoothstep(size,size+aa,vec2(1.0)-uv);
                    color.rgb = vec3(uv2.x*uv2.y);
    buildings:
        base: polygons
        mix: matrix
        blend: add
        animated: true
        shaders:
            blocks:
                color: |
                    vec3 pos = worldPosition().xyz*0.01;
                    vec2 uv = v_texcoord.xy;
                    float pct = grid(v_texcoord,10.,0.1)*0.5;
                    uv *= 20.;
                    uv = fract(uv);
                    // uv += sin(u_time*0.2);
                    float smoothEdges = 0.01;
                    vec2 size = vec2(0.9);
                    size = vec2(0.5)-size*0.1;
                    vec2 aa = vec2(smoothEdges*0.5);
                    vec2 uv2 = smoothstep(size,size+aa,uv);
                    uv2 *= smoothstep(size,size+aa,vec2(1.0)-uv);
                    color.rgb = vec3(uv2.x*uv2.y);
    # AstoriaShader:
    #     base: points
    #     mix: matrix
    #     animated: true
    #     shaders:
    #         blocks:
    #             color: |
    #                 vec3 pos = worldPosition().xyz*0.01;
    #                 color.rgb = vec3(abs(sin(u_time*0.3)),0.0,pos.y);
    # crownHeights_L_Shader:
    #     base: points
    #     mix: matrix
    #     animated: true
    #     shaders:
    #         blocks:
    #             color: |
    #                 vec3 pos = worldPosition().xyz*0.01;
    #                 color.rgb = vec3(abs(sin(u_time*0.3)),0.0,pos.y);
    # crownHeights_TB_Shader:
    #     base: points
    #     mix: matrix
    #     animated: true
    #     shaders:
    #         blocks:
    #             color: |
    #                 vec3 pos = worldPosition().xyz*0.01;
    #                 color.rgb = vec3(abs(sin(u_time*0.3)),0.0,pos.y);
    # fortGreenShader:
    #     base: points
    #     mix: matrix
    #     animated: true
    #     shaders:
    #         blocks:
    #             color: |
    #                 vec3 pos = worldPosition().xyz*0.01;
    #                 color.rgb = vec3(abs(sin(u_time*0.3)),0.0,pos.y);
    color-tools:
        shaders:
            blocks:
                global: |
                    // Get the intensity of a color
                    // ================================
                    float getIntensity (vec3 c) {
                        return (c.r+c.g+c.b)/3.0;
                    }
                    float getIntensity (vec4 c) {
                        return getIntensity(c.rgb);
                    }
                    //
                    // Get the Brightness of a color
                    // ================================
                    float getBrightness (vec3 c) {
                        return 0.212655 * c.r + 0.715158 * c.g + 0.072187 * c.b;
                    }
                    float getBrightness (vec4 c) {
                        return getBrightness(c.rgb);
                    }
    generative-random:
        shaders:
            blocks:
                global: |
                    // 1D Random for 1 and 2 dimentions
                    // ================================
                    float random (float x) {
                        return fract(sin(x)*1e4);
                    }
                    float random (vec2 xy) {
                        return fract(sin(dot(xy.xy, vec2(12.9898,78.233)))* 43758.5453123);
                    }
                    //
                    // 2D Random for 2 dimentions
                    // ================================
                    vec2 random2 (vec2 xy) {
                        return fract(sin(vec2(dot(xy,vec2(127.1,311.7)),dot(xy,vec2(269.5,183.3))))*43758.5453);
                    }
                    //
                    // 3D Random for 2 dimentions
                    // ================================
                    vec3 random3 (vec2 xy) { 
                        return fract(sin(vec3( dot(xy,vec2(127.1,311.7)), dot(xy,vec2(269.5,183.3)), dot(xy,vec2(419.2,371.9)) ))*43758.5453); 
                    }
    filter-tv:
        shaders: 
            blocks: 
                filter: |
                    vec2 tv_st = gl_FragCoord.xy/u_resolution.xy;
                    tv_st -= .5;
                    color *= abs(cos((gl_FragCoord.y*21.1+u_time*5.)));
                    color *= 1.0-dot(tv_st,tv_st);                           
    icons:
        base: points
        texcoords: true
        mix: [tilt, shapes-polygons, color-conversion, color-tools, filter-tv, generative-random]
        shaders: 
            blocks:
                color: |
                    vec2 st = gl_FragCoord.xy/u_resolution.xy;
                    float rad = dot(st,st)*.5;
                    color.a = max(color.r,max(color.g,color.b))*(1.0);                
    fortGreenShader:
        base: points
        texcoords: true
        mix: [tilt, shapes-polygons, color-conversion, color-tools, filter-tv, generative-random]
    AstoriaShader:
        base: points
        texcoords: true
        mix: [tilt, shapes-polygons, color-conversion, color-tools, filter-tv, generative-random]
    crownHeights_L_Shader:
        base: points
        texcoords: true
        mix: [tilt, shapes-polygons, color-conversion, color-tools, filter-tv, generative-random]
    crownHeights_TB_Shader:
        base: points
        texcoords: true
        mix: [tilt, shapes-polygons, color-conversion, color-tools, filter-tv, generative-random]
layers:
    astoriaLayer:
        data: { source: astoria_data }
        draw:
            AstoriaShader:
                order: 10
                size: |
                    function() { return feature.percentage/10; }
            tilt_points:
                order: 10
                # size: |   
                #     function() { return feature.percentage/100.0; }
    crownHeights_L_Layer:
        data: { source: crownHeights_L_data }
        draw:
            crownHeights_L_Shader:
                order: 10
                size: |
                    function() { return feature.percentage/10; }
            tilt_points:
                order: 10
                # size: |   
                #     function() { return feature.percentage/100.0; }
    crownHeights_TB_Layer:
        data: { source: crownHeights_TB_data }
        draw:
            crownHeights_TB_Shader:
                order: 10
                size: |
                    function() { return feature.percentage/10; }
            tilt_points:
                order: 10
                # size: |   
                #     function() { return feature.percentage/100.0; }
    fortGreen_Layer:
        data: { source: fortgreen_data }
        draw:
            fortGreenShader:
                order: 10
                size: |
                    function() { return feature.percentage/10; }
            tilt_points:
                order: 10
                # size: |   
                #     function() { return feature.percentage/100.0; }
    landuse:
        data: { source: osm }
        draw:
            # tiledCross:
            #     order: 1
            #     color: [0.0,0.0,0.0]
            polygons:
                style: flat
                order: 0
                color: '#000000'

    water:
        data: { source: osm }
        draw:
            grid:
                order: 3
                color: [0.0,0.0,0.0]
            outline:
                order: 2
                style: polygons
                color: [0.0,0.0,0.0]
                width: 1px
                tile_edges: false
            polygons:
                order: 2
                color: [0.004, 0.012, 0.020]
    roads:
        data: { source: osm }
        filter: { not: { kind: [rail, ferry] } }
        draw:
            roads:
                order: 4
                color: [0, 0, 0]
                width: 8
        oneway:
            filter: { oneway: yes }
            draw: { roads: { color: red } }
        highway:
            filter:
                kind: highway
            draw:
                roads:
                    order: 5
                    width: 12
                outline:
                    style: lin
                    order: 4
                    color: [0, 0, 0]
                    width: 13
        tunnel:
            filter:
                is_tunnel: yes
            draw:
                roads:
                    color: tan
            rail:
                filter:
                    kind: rail
                visible: false
        minor_road:
            filter:
                kind: minor_road
            draw:
                roads:
                    width: 5
        path:
            filter:
                kind: path
            draw:
                roads:
                    width: 3
        rail:
            filter:
                kind: rail
                is_tunnel: no
            draw:
                roads:
                    width: 3
    buildings:
        data: { source: osm }
        draw:
            buildings:
                order: 7
                color: [0, 0, 0]
        3d-buildings:
            filter: { $zoom: { min: 13 } }
            draw:
                buildings:
                    extrude: true
                buildingsLines:
                    order: 8
                    color: [0.643,0.851,0.690]
                    width: [[12, .1px], [14, 0.5px], [15, 1.5px], [17, 1.5px], [18, 2px]]
                    extrude: true
    # places:
    #     data: { source: osm }
    #     filter: { name: true }
    #     draw:
    #         icons:
    #             color: Style.color.pseudoRandomColor()
    #             size: [[13, 20px], [15, 40px]]
    #             interactive: true
    #         New_tilt:
    #             order: 10
